config("compiler_defaults") {
  defines = []
  cflags = []
  cflags_cc = []
  cflags_objcc = []

  if (is_win) {
    cflags += ["/std:c++20"]
  } else {
    cflags += [ "-std=c11" ]   
    cflags_cc += [ "-std=c++20" ]
    cflags_objcc += ["-std=c++20"]
  }

  if (is_win) {
    defines += ["OS_WIN", "_HAS_STD_BYTE=0"]
  }
  else if (is_linux) {
    defines += ["OS_LINUX"]
    cflags += [
      "-fPIC",
      "-pthread",
    ]
  } else if (is_mac) {
    defines += ["OS_MAC"]
  }
  if (is_x64) {
    defines += ["CPU_X64"]
  }
  if (is_debug) {
    defines += ["_DEBUG", "DEBUG"]
  }

  if (is_linux || is_mac) {
    # 默认函数不导出，通过添加xxAPI前缀导出。
    cflags += [
      "-fvisibility=hidden"
    ]
  }

  if (is_debug && (is_mac || is_linux)) {
      cflags += ["-g"]
  }
}

config("executable_ldconfig") {
  if (is_linux) {
    # 将程序所在路径，设置为动态库文件的加载路径。
    ldflags = [
      "-Wl,-rpath=\$ORIGIN/",
      "-Wl,-rpath-link=",
    ]
  } else if (is_mac) {
    # 将程序所在目录，添加到rpath中。
    # 各个dylib 还需要指定 -install_name @rpath/xxxx.dylib 
    # 使用 otool -L xxx 命令，查看程序或dylib的依赖库和路径。
    ldflags = [
     "-Wl,-rpath,@executable_path/."
    ]
  }
}
