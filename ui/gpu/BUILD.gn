shared_library("uigpu") {
    cflags = []
    if (is_debug && (is_mac || is_linux)) {
      cflags += ["-g"]
    }

    defines = ["UI_EXPORTS"]

    include_dirs = [
        "//",
        "//ui/",
        "//ui/gpu/",
        "//ui/sdk/",
        "//ui/3rd/skia/src/",
        "//ui/3rd/skia/src/include/core/"
    ]
    
    lib_dirs = ["$root_build_dir/"]

    if (is_win) {
      include_dirs += [
        "C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include"
      ]
      lib_dirs += [
        "C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Lib\x64"
      ]
    }
    else if (is_mac) {
      include_dirs += [
        "/Users/libo/application/VulkanSDK/1.3.261.1/macOS/include"
      ]
    }
  
    sources = [
      "src/igpucompositor.cpp",
      "tutorial/tutorial_01.cpp",
      "tutorial/tutorial_02.cpp"
    ]
    if (is_win) {
      sources += [
        "src/d3d10/stdafx.cpp",
        "src/d3d10/d3d10_compositor.cpp",
        "src/d3d10/d3d10_gpu_layer.cpp",
        "src/d3d10/d3d10_app.cpp",
        "src/d3d10/d3d10_texture_tile.cpp",
        "src/d3d10/common/Effects.cpp",
        "src/d3d10/common/Font.cpp",
        "src/d3d10/common/Inputs.cpp",
        "src/d3d10/common/RenderStates.cpp",
        "src/d3d10/UICompositor.rc",
        "src/d3d10/hard3dtransform.cpp",
      ]
    } else {
      sources += [

        "src/gpu_layer.cpp",
        "src/texture_tile.cpp",
        "src/texture_tile_array.cpp",

        "src/vulkan/vkapp.cpp",
        "src/vulkan/vkcompositor.cpp",
        "src/vulkan/vklayer.cpp",
        "src/vulkan/vktexturetile.cpp",
      ]
    }
    if (is_mac) {
      sources += [
        "src/vulkan/vkcompositor_mac.mm"
      ]
    }

    # 单元测试
    if (is_debug) {
      defines += ["UI_UNITTEST"]
      sources += [
        "test/test_entry.cpp",
      ]

      if (is_mac) {
        include_dirs += [
          "/Users/libo/application/glfw-3.3.8.bin.MACOS/include"
        ]
        libs = ["glfw3", "vulkan.1.3.261"]
      }
    }
     if (is_mac) {
        ldflags = [
            "-framework", "Cocoa",
            "-framework", "IOKit",
            "-framework", "QuartzCore",  # Core Animation
        ]
    }
    else if (is_win) {
      libs = [
        "d3d10.lib",
        "d3dx10.lib",
        "D3D10_1.lib",
      ]
    }
}
if (is_mac) {
  copy("glfw") {
    sources = [
      "/Users/libo/application/glfw-3.3.8.bin.MACOS/lib-x86_64/libglfw3.a",
      "/Users/libo/application/VulkanSDK/1.3.261.1/macOS/lib/libvulkan.1.3.261.dylib"
    ]
    outputs = ["$root_build_dir/{{source_file_part}}"]
  }
}
copy("shader") {
  sources = [
      "src/vulkan/shaders/frag.spv",
      "src/vulkan/shaders/vert.spv",
  ]
  outputs = ["$root_build_dir/shaders/{{source_file_part}}"]
}

#######################################

executable("uigpu_unittest") {
  deps = [
    "//ui/gpu:uigpu"
  ]

  cflags = []
  if (is_debug || (is_mac||is_linux)) {
    cflags = ["-g"]
  }

  include_dirs = [
    "//ui/",
    "//ui/gpu/",
  ]
  sources = [
    "test/test_main.cpp"
  ]
}

group("gpu") {
  deps = [
    ":uigpu"
  ]
}

group("gpu_test") {
  deps = [
    ":uigpu_unittest"
  ]
}