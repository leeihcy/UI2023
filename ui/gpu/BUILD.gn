declare_args() {
  # Debug build
  enable_d3d10 = false
  enable_vulkan = true
}

shared_library("uigpu") {
    output_dir = "$root_out_dir/bin" 
    cflags = []

    deps = [
      ":compile_shaders"
    ]
    if (is_mac) {
      deps += [
        ":copy_glfw"
      ]
    }

    # if (is_win) {
    #   enable_d3d10 = true
    #   enable_vulkan = false
    # }
    if (enable_d3d10) {
      cflags += [
        "-DENABLE_D3D10"
      ]
    }
    else if (enable_vulkan && (is_linux || is_mac)) {
      cflags += [
        "-Wno-deprecated-volatile"
      ]
    }

    if (is_debug && (is_mac || is_linux)) {
      cflags += ["-g"]
    }
    
    include_dirs = [
        "//",
        "//ui/",
        "//ui/gpu/",
        "//ui/sdk/",
        "//ui/3rd/skia/src/",
        "//ui/3rd/skia/src/include/core/"
    ]
    defines = ["UI_EXPORTS"]
    libs = []
    lib_dirs = ["$root_build_dir/bin"]
   
    sources = [
      "src/gpu_layer.cpp",
      "src/texture_tile.cpp",
      "src/texture_tile_array.cpp",
      "src/igpucompositor.cpp",
      "tutorial/tutorial_01.cpp",
      "tutorial/tutorial_02.cpp"
    ]
    if (enable_d3d10) {
      sources += [
        "src/d3d10/d3d10_compositor.cpp",
        "src/d3d10/d3d10_gpu_layer.cpp",
        "src/d3d10/d3d10_app.cpp",
        "src/d3d10/d3d10_texture_tile.cpp",
        "src/d3d10/common/Effects.cpp",
        "src/d3d10/common/Font.cpp",
        "src/d3d10/common/Inputs.cpp",
        "src/d3d10/common/RenderStates.cpp",
        "src/d3d10/UICompositor.rc",
        "src/d3d10/hard3dtransform.cpp",
      ]

      libs += [
        "atls.lib",
        "d3d10.lib",
        "d3dx10.lib",
        "D3D10_1.lib",
      ]
      include_dirs += [
        "C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include"
      ]
      lib_dirs += [
        "C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Lib\x64"
      ]
    } 
    if (enable_vulkan) {
      sources += [
        "src/vulkan/vkapp.cpp",
        "src/vulkan/vkcompositor.cpp",
        "src/vulkan/vkcompositor.h",
        "src/vulkan/vkcompositor_draw_frame.cpp",
        "src/vulkan/vklayer.cpp",
        "src/vulkan/vktexturetile.h",
        "src/vulkan/vktexturetile.cpp",

        "src/vulkan/wrap/vulkan_command_buffer.h",
        "src/vulkan/wrap/vulkan_command_buffer.cpp",
        "src/vulkan/wrap/vulkan_command_pool.cpp",
        "src/vulkan/wrap/vulkan_device_queue.cpp",
        "src/vulkan/wrap/vulkan_swap_chain.cpp",
        "src/vulkan/wrap/vulkan_swap_chain.h",
        "src/vulkan/wrap/vulkan_swap_chain_image.cpp",
        "src/vulkan/wrap/vulkan_image_view.cpp",
        "src/vulkan/wrap/vulkan_pipe_line.cpp",
        "src/vulkan/wrap/vulkan_sync.cpp",
        "src/vulkan/wrap/vulkan_buffer.cpp",
        "src/vulkan/wrap/vulkan_util.cpp",
      ]

      VULKAN_SDK_DIR = exec_script("//script/get_env.py", ["VULKAN_SDK_DIR"], "string")
      include_dirs += [
        VULKAN_SDK_DIR + "/include"
      ]

      if (is_win) {
        include_dirs += [ VULKAN_SDK_DIR + "\\include" ]
        lib_dirs += [ VULKAN_SDK_DIR + "\\Lib" ]
        libs += [ "vulkan-1.lib" ]
      }
      else if (is_mac) {
        include_dirs += [ VULKAN_SDK_DIR + "/include" ]
        libs += ["vulkan.1.3.261"]
      }
      else if (is_linux) {
        include_dirs += [ VULKAN_SDK_DIR + "/include" ]
        libs += ["vulkan"]
      }
    }

    # 单元测试
    if (is_debug) {
      defines += ["UI_UNITTEST"]
      sources += [
        "test/test_entry.cpp",
      ]
      if (is_mac) {
        include_dirs += [
          "/Users/libo/application/glfw-3.3.8.bin.MACOS/include"
        ]
        libs += ["glfw3"]
      }
    }
    if (is_mac) {
      ldflags = [
            "-framework", "Cocoa",
            "-framework", "IOKit",
            "-framework", "QuartzCore",  # Core Animation
      ]
    }

    # cflags += [
    #   "/wd4005",
    #   "/wd4267",  # 从“size_t”转换到“uint32_t” ，可能丢失数据
    # ]
}
if (is_mac) {
  copy("copy_glfw") {
    sources = [
      "/Users/libo/application/glfw-3.3.8.bin.MACOS/lib-x86_64/libglfw3.a",
      "/Users/libo/application/VulkanSDK/1.3.261.1/macOS/lib/libvulkan.1.3.261.dylib"
    ]
    outputs = ["$root_build_dir/bin/{{source_file_part}}"]
  }
}

action("compile_shaders") {
  script = "//ui/gpu/src/vulkan/shaders/compile.py"
  inputs = [
    "src/vulkan/shaders/shader.frag",
    "src/vulkan/shaders/shader.vert",
  ]
  outputs = [
    "$root_build_dir/bin/shaders/vert.spv",
    "$root_build_dir/bin/shaders/frag.spv",
  ]
  args = [rebase_path("$root_build_dir/bin/shaders")]
}

group("gpu") {
  deps = [
    ":uigpu"
  ]
}

#######################################
if (is_debug) {
executable("uigpu_unittest") {
  output_dir = "$root_out_dir/bin"
  deps = [
    "//ui/gpu:uigpu"
  ]

  cflags = []
  if (is_debug || (is_mac||is_linux)) {
    cflags = ["-g"]
  }

  include_dirs = [
    "//ui/",
    "//ui/gpu/",
  ]
  sources = [
    "test/test_main.cpp"
  ]
}

group("gpu_test") {
  print("group gpu_test")
  deps = [
    ":uigpu_unittest"
  ]
}
}